diff --git a/baos_knx_parser/__init__.py b/baos_knx_parser/__init__.py
index b14229f..cc6f095 100644
--- a/baos_knx_parser/__init__.py
+++ b/baos_knx_parser/__init__.py
@@ -1,5 +1,5 @@
 
-from .knx import KnxAddress, KnxBaseTelegram, KnxExtendedTelegram, KnxStandardTelegram
-from .const import TelegramType, TelegramPriority, APCI, TPCI
+from .knx import KnxAddress, KnxBaseTelegram, KnxExtendedTelegram, KnxStandardTelegram, KnxAcknowledgementTelegram
+from .const import TelegramType, TelegramPriority, APCI, TPCI, TelegramAcknowledgement
 from .parser import parse_knx_telegram
 from .constructor import construct_payload
diff --git a/baos_knx_parser/const.py b/baos_knx_parser/const.py
index 4bb3e93..ec37306 100644
--- a/baos_knx_parser/const.py
+++ b/baos_knx_parser/const.py
@@ -81,3 +81,10 @@ class TelegramPriority(BitmaskEnum):
     URGENT  = 0b10
     NORMAL  = 0b01
     LOW     = 0b11
+
+
+class TelegramAcknowledgement(BitmaskEnum):
+    ACK       = 0b11001100
+    BUSY      = 0b11000000
+    NACK      = 0b00001100
+    NACK_BUSY = 0b00000000
diff --git a/baos_knx_parser/knx.py b/baos_knx_parser/knx.py
index 2b835d5..04d8b4e 100644
--- a/baos_knx_parser/knx.py
+++ b/baos_knx_parser/knx.py
@@ -2,7 +2,7 @@
 from datetime import datetime
 
 from . import struct  # precompiled bitstructs
-from .const import TelegramType, TelegramPriority, APCI, TPCI
+from .const import TelegramType, TelegramPriority, APCI, TPCI, TelegramAcknowledgement
 
 
 class KnxAddress(object):
@@ -182,3 +182,11 @@ class KnxExtendedTelegram(KnxBaseTelegram):
         ))
 
         return binary
+
+class KnxAcknowledgementTelegram(object):
+
+    def __init__(self, acknowledgement=TelegramAcknowledgement.ACK):
+        self.acknowledgement = TelegramAcknowledgement(acknowledgement)
+
+    def __repr__(self):
+        return """KnxAcknowledgementTelegram(ack='{0}')""".format(repr(self.acknowledgement))
\ No newline at end of file
diff --git a/baos_knx_parser/parser.py b/baos_knx_parser/parser.py
index 7daf4cc..0d57524 100644
--- a/baos_knx_parser/parser.py
+++ b/baos_knx_parser/parser.py
@@ -1,7 +1,7 @@
 
 from . import struct
 from .const import TelegramType, APCI
-from .knx import KnxAddress, KnxExtendedTelegram, KnxStandardTelegram
+from .knx import KnxAddress, KnxExtendedTelegram, KnxStandardTelegram, KnxAcknowledgementTelegram
 
 
 def parse_knx_telegram(binary, timestamp=None):
@@ -9,9 +9,46 @@ def parse_knx_telegram(binary, timestamp=None):
 
     # cEMI stuff
     msg_code, = struct.CEMI_MSG_CODE.unpack(binary[0:1])
-    if msg_code != 0x29:
-        raise TypeError("Can only parse L_Data.ind (0x29) at the moment, but got {}".format(hex(msg_code)))
+    if msg_code == 0x29:
+        return parse_data_ind(binary, timestamp)
+    else:
+        return parse_busmon_ind(binary, timestamp)
+
+def parse_busmon_ind(binary, timestamp):
+    if len(binary) == 1:
+        # handle ACK telegram
+        acknowledgement, = struct.KNX_ACK.unpack(binary[0:1])
+        return KnxAcknowledgementTelegram(acknowledgement=acknowledgement)
+
+    # parse CTRL
+    frame_type_flag, repeated_flag, system_broadcast_flag, priority, acknowledge_request_flag, confirm_flag = struct.KNX_CTRL.unpack(binary[0:1])
+    acknowledge_request_flag = not acknowledge_request_flag  # acknowledge_request_flag flag is send inverted
+    confirm_flag = not confirm_flag  # if `not confirm_flag` => error
+    repeated_flag = not repeated_flag  # same with repeated_flag flag
+
+    # parse NPCI
+    destination_address_type, hop_count, payload_length = struct.KNX_NPCI.unpack(binary[5:6])
+
+    # create data model class
+    if frame_type_flag == TelegramType.EXT:
+        telegram = KnxExtendedTelegram(timestamp=timestamp, telegram_type=frame_type_flag, repeat=repeated_flag, ack=acknowledge_request_flag,
+                                       priority=priority, confirm=confirm_flag, hop_count=hop_count)
+    else:
+        telegram = KnxStandardTelegram(timestamp=timestamp, telegram_type=frame_type_flag, repeat=repeated_flag, ack=acknowledge_request_flag,
+                                       priority=priority, confirm=confirm_flag, hop_count=hop_count)
+
+    # parse addresses
+    telegram.src = parse_knx_addr(binary[1:3])
+    telegram.dest = parse_knx_addr(binary[3:5], group=destination_address_type)
+
+    # parse payload
+    telegram.payload_length = payload_length - 1
+    telegram.payload = binary[6:8 + telegram.payload_length]
+    apci = telegram.apci
+    telegram.payload_data = parse_payload_data(apci,binary[6:8 + telegram.payload_length], telegram.payload_length)
+    return telegram
 
+def parse_data_ind(binary, timestamp):
     add_len, = struct.CEMI_ADD_LEN.unpack(binary[1:2])
     knx_binary = binary[add_len + 2:]
 
@@ -176,5 +213,5 @@ def parse_payload_data(apci, payload_bytes, payload_length):
     elif apci == APCI.A_KEY_RESPONSE:
         payload_data = int(payload_bytes[2:3].hex(), 16)
     else:
-        raise Exception(f'Parsing of Payload for {telegram.apci} not yet implemented!')
+        raise Exception('Parsing of Payload for {0} not yet implemented!'.format(telegram.apci))
     return payload_data
diff --git a/baos_knx_parser/struct.py b/baos_knx_parser/struct.py
index 507ad06..815de8a 100644
--- a/baos_knx_parser/struct.py
+++ b/baos_knx_parser/struct.py
@@ -16,4 +16,7 @@ KNX_LENGTH = STD_U8
 KNX_APCI = bitstruct.compile('>p6u10')
 KNX_TPCI = bitstruct.compile('>u2p4p2')
 KNX_TPCI_APCI = bitstruct.compile('>u2u4u10')
+KNX_NPCI = bitstruct.compile('>b1u3u4')
 KNX_PACKET_NUMBER = bitstruct.compile('>p2u4p2')
+
+KNX_ACK = STD_U8
diff --git a/examples/parse_hex.py b/examples/parse_hex.py
index f2aa790..5e816ab 100644
--- a/examples/parse_hex.py
+++ b/examples/parse_hex.py
@@ -6,6 +6,14 @@ import baos_knx_parser as knx
 This example shows, how to take the complete hex from the logs and parse all standard fields
 """
 
+t = knx.parse_knx_telegram(bytes.fromhex('cc'))
+print(t)
+print()
+
+t = knx.parse_knx_telegram(bytes.fromhex('bc362712f0e300802710e4'))
+print(t)
+print(t.apci)
+print()
 
 print("00:04:01        2012-02-27      3.2.50  2/3/4   00800C7E        2900BCC0323213040200800C7E")
 t = knx.parse_knx_telegram(bytes.fromhex('2900BCC0323213040200800C7E'))

